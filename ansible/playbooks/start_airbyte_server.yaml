---
- name: start Airbyte server
  hosts: airbyte-server-0
  gather_facts: true
  become: true
  
  tasks:
    - name: Install Airbyte CLI
      ansible.builtin.shell:
        cmd: "curl -LsfS https://get.airbyte.com | bash -"
      args:
        executable: /bin/bash

    - name: Run Airbyte with low-resource mode
      ansible.builtin.shell:
        cmd: "abctl local install --port {{ airbyte_port }} --low-resource-mode --insecure-cookies"
      args:
        executable: /bin/bash

    - name: Set up Airbyte credentials - email
      ansible.builtin.shell:
        cmd: "abctl local credentials --email {{ airbyte_email }}"
      args:
        executable: /bin/bash

    - name: Set up Airbyte credentials - password
      ansible.builtin.shell:
        cmd: "abctl local credentials --password {{ airtbyte_pasword }}"
      args:
        executable: /bin/bash

    - name: Run abctl local credentials command
      shell: abctl local credentials
      register: abctl_output  
    
    - name: Print raw command output
      debug:
        msg: "{{ abctl_output.stdout }}"

    - name: Extract Client-Id
      set_fact:
        client_id: "{{ (abctl_output.stdout | regex_search('Client-Id:\\s+([a-zA-Z0-9-]+)', '\\1') | first).strip() }}"

    - name: Extract Client-Secret
      set_fact:
        client_secret: "{{ (abctl_output.stdout | regex_search('Client-Secret:\\s+([a-zA-Z0-9]+)', '\\1') | first).strip() }}"

    - name: Print Client ID
      debug:
        msg: "Client ID: {{ client_id }}"

    - name: Print Client Secret
      debug:
        msg: "Client Secret: {{ client_secret }}"
    
    - name: Request access token
      uri:
        url: 'http://{{ ansible_host }}:{{ airbyte_port }}/api/v1/applications/token'
        method: POST
        headers:
          Content-Type: 'application/json'
        body: |
          {
            "client_id": "{{ client_id }}",
            "client_secret": "{{ client_secret }}"
          }
        body_format: json
        return_content: yes
      register: token_response

    - name: Show access token
      debug:
        msg: "Access Token: {{ token_response.json.access_token }}"

    - name: Request workspace details
      uri:
        url: 'http://{{ ansible_host }}:{{ airbyte_port }}/api/public/v1/workspaces'
        method: GET
        headers:
          accept: 'application/json'
          authorization: 'Bearer {{ token_response.json.access_token }}'
        return_content: yes
      register: workspace_response

    - name: Show workspace ID
      debug:
        msg: "Workspace ID: {{ workspace_response.json.data[0].workspaceId }}"

    - name: Create source (sftp-server)
      uri:
        url: 'http://{{ ansible_host }}:{{ airbyte_port }}/api/public/v1/sources'
        method: POST
        headers:
          accept: 'application/json'
          authorization: 'Bearer {{ token_response.json.access_token }}'
          content-type: 'application/json'
        body: |
          {
            "configuration": {
              "sourceType": "sftp",
              "user": "{{ sftp_user }}",
              "host": "{{ hostvars['src-server-0'].ansible_host }}",
              "port": {{ sftp_port }},
              "credentials": {
                "auth_method": "SSH_PASSWORD_AUTH",
                "auth_user_password": "{{ sftp_password }}"
              },
              "file_types": "{{ airbyte_sftp_filetype }}",
              "folder_path": "{{ airbyte_sftp_src_dir }}",
              "file_pattern": "{{ airbyte_sftp_file_pattern }}"
            },
            "name": "src-server",
            "workspaceId": "{{ workspace_response.json.data[0].workspaceId }}"
          }
        body_format: json
        timeout: 120
        return_content: yes
      register: sftp_server_source_response
      

    - name: Show source ID
      debug:
        msg: "Source ID: {{ sftp_server_source_response.json.sourceId }}"

    - name: Create destination
      uri:
        url: 'http://{{ ansible_host }}:{{ airbyte_port }}/api/public/v1/destinations'
        method: POST
        headers:
          accept: 'application/json'
          authorization: 'Bearer {{ token_response.json.access_token }}'
          content-type: 'application/json'
        body: |
          {
            "configuration": {
              "destinationType": "s3",
              "access_key_id": "{{ minio_root_usr }}",
              "secret_access_key": "{{ minio_root_password }}",
              "s3_bucket_name": "{{ minio_bucket_name }}",
              "s3_bucket_path": "{{ minio_bucket_path }}",
              "s3_bucket_region": "{{ minio_bucket_region }}",
              "format": {
                "format_type": "CSV",
                "compression": {
                  "compression_type": "No Compression"
                },
                "flattening": "No flattening"
              },
              "s3_endpoint": "http://{{ hostvars['storage-server-0'].ansible_host }}:{{ minio_api_port }}"
            },
            "name": "storage-server",
            "workspaceId": "{{ workspace_response.json.data[0].workspaceId }}"
          }
        body_format: json
        timeout: 120
        return_content: yes
      register: storage_server_destination_response

    - name: Show destination ID
      debug:
        msg: "Destination ID: {{ storage_server_destination_response.json.destinationId }}"
    
    - name: Create connection
      uri:
        url: 'http://{{ ansible_host }}:{{ airbyte_port }}/api/public/v1/connections'
        method: POST
        headers:
          accept: 'application/json'
          authorization: 'Bearer {{ token_response.json.access_token }}'
          content-type: 'application/json'
        body: |
          {
            "name": "src-server -> storage-server",
            "sourceId": "{{ sftp_server_source_response.json.sourceId }}",
            "destinationId": "{{ storage_server_destination_response.json.destinationId }}",
            "configurations": {
              "streams": [
                {
                  "syncMode": "{{ airbyte_sync_mode }}",
                  "name": "{{ airbyte_src_stream_name_1 }}",
                  "cursorField": [
                    "{{ airbyte_sftp_file_pattern }}"
                  ]
                },
                {
                  "syncMode": "{{ airbyte_sync_mode }}",
                  "name": "{{ airbyte_src_stream_name_2 }}",
                  "cursorField": [
                    "{{ airbyte_sftp_file_pattern }}"
                  ]
                },
                {
                  "syncMode": "{{ airbyte_sync_mode }}",
                  "name": "{{ airbyte_src_stream_name_3 }}",
                  "cursorField": [
                    "{{ airbyte_sftp_file_pattern }}"
                  ]
                }
              ]
            },
            "schedule": {
              "scheduleType": "cron",
              "cronExpression": "{{ airbyte_sync_cron }}"
            }
          }
        body_format: json
        timeout: 120
        return_content: yes
      register: src_storage_connection_response

    - name: Show connection ID
      debug:
        msg: "Connection ID: {{ src_storage_connection_response.json.connectionId }}"
