global:
  checkNewVersion: false
  sendAnonymousUsage: false

accessLog: {}

log:
  level: DEBUG

api:
  dashboard: true
  insecure: true
  debug: false

entryPoints:
  web:
    address: :80
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https
  websecure:
    address: :443

certificatesResolvers:
  letsencrypt:
    # https://docs.traefik.io/master/https/acme/#lets-encrypt
    acme:
      email: "{{ traefik_monitor_mail }}" 
      storage: /etc/traefik/acme/acme.json
      # https://docs.traefik.io/master/https/acme/#httpchallenge
      httpChallenge:
        entryPoint: web
      
http:
  routers:
    sftp-svc-router:
      rule: "Host(`sftp.{{ traefik_platform_host }}`)" 
      entryPoints:
        - web
      middlewares:
        - csrf
      service: sftp-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    postgres-svc-router:
      rule: "Host(`postgres.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
      service: postgres-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    airbyte-svc-router:
      rule: "Host(`airbyte.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
      service: airbyte-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt

    storage-svc-router-console:
      rule: "Host(`storage.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
      service: storage-console-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    storage-svc-router-api:
      rule: "Host(`storage.{{ traefik_platform_host }}`) && Path(`/api`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
      service: storage-api-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    query-svc-router:
      rule: "Host(`query.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: query-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    prometheus-router:
      rule: "Host(`prometheus.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: prometheus-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    loki-router:
      rule: "Host(`loki.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: loki-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    alertmanager-router:
      rule: "Host(`alertmanager.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: alertmanager-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    grafana-router:
      rule: "Host(`grafana.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
      service: grafana-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    exporter0-router:
      rule: "Host(`exporter0.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: exporter-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt
    
    exporter1-router:
      rule: "Host(`exporter1.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: exporter-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt

    exporter2-router:
      rule: "Host(`exporter2.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: exporter-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt

    exporter3-router:
      rule: "Host(`exporter3.{{ traefik_platform_host }}`)" 
      entryPoints:
        - websecure
      middlewares:
        - csrf
        - basic-auth
      service: exporter-svc
      tls:
        # https://docs.traefik.io/master/routing/routers/#certresolver
        certResolver: letsencrypt

    
  middlewares:
    csrf:
      # https://docs.traefik.io/master/middlewares/headers/#hostsproxyheaders
      # https://docs.djangoproject.com/en/dev/ref/csrf/#ajax
      headers:
        hostsProxyHeaders: ["X-CSRFToken"]
    
    basic-auth:
      basicauth:
        users:
          - "{{ traefik_basic_auth_user }}:{{ traefik_basic_auth_encrypt_password }}"

  services:
    sftp-svc:
      loadBalancer:
        servers:
          - url: http://sftp:"{{ sftp_port }}"
    
    postgres-svc:
      loadBalancer:
        servers:
          - url: http://postgres:"{{ postgres_port }}"

    airbyte-svc:
      loadBalancer:
        servers:
          - url: http://airbyte:"{{ airbyte_port }}"

    storage-console-svc:
      loadBalancer:
        servers:
          - url: http://minio:"{{ minio_console_port }}"
    
    storage-api-svc:
      loadBalancer:
        servers:
          - url: http://minio:"{{ minio_api_port }}"

    query-svc:
      loadBalancer:
        servers:
          - url: http://minio:"{{ duckdb_svc_container_port }}"

    prometheus-svc:
      loadBalancer:
        servers:
          - url: http://prometheus:"{{ prometheus_web_port }}"
    
    loki-svc:
      loadBalancer:
        servers:
          - url: http://loki:"{{ loki_http_listen_port }}"

    alertmanager-svc:
      loadBalancer:
        servers:
          - url: http://loki:"{{ alertmanager_web_port }}"

    grafana-svc:
      loadBalancer:
        servers:
          - url: http://grafana:"{{ grafana_port }}"
    
    exporter-svc:
      loadBalancer:
        servers:
          - url: http://node-exporter:"{{ node_exporter_local_port }}"

providers:
  docker:
    exposedByDefault: false
    endpoint: 'unix:///var/run/docker.sock'
    watch: true
  file:
    filename: /etc/traefik/traefik.yml
    watch: true
  