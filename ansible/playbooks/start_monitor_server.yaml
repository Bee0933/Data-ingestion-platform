---
- name: start metrics on platform
  hosts: monitor-server-0
  gather_facts: true
  become: true
  
  tasks:
    - name: Create docker volume prometheus_data
      community.docker.docker_volume:
        name: prometheus_data

    - name: Create prometheus_config_dir
      ansible.builtin.file:
        path: "{{ prometheus_config_dir }}"
        state: directory

    - name: Create prometheus targets dir
      ansible.builtin.file:
        path: "{{ prometheus_config_dir }}/targets"
        state: directory

    - name: Find target files
      ansible.builtin.find:
        paths: "{{ prometheus_config_dir }}/targets"
        recurse: true
      register: target_files

    - name: Template prometheus targets files
      ansible.builtin.template:
        src: templates/targets.yml.j2
        dest: "{{ prometheus_config_dir }}/targets/targets.yml"

    - name: Copy prometheus config file
      ansible.builtin.template:
        src: templates/prometheus.yml.j2
        dest: "{{ prometheus_config_dir }}/prometheus.yml"

    - name: Copy prometheus rules file
      ansible.builtin.copy:
        src: templates/rules.yml
        dest: "{{ prometheus_config_dir }}/rules.yml"
        # validate: promtool check rules %s

    - name: Start prometheus
      community.docker.docker_container:
        name: "{{ container_name_prometheus }}"
        state: started
        image: "{{ prometheus_container_imagename }}:{{ prometheus_container_image_tag }}"
        pull: true
        stop_timeout: 20

        command: >
          --config.file={{ prometheus_config_container_dir }}/prometheus.yml
          --storage.tsdb.path=/prometheus
          --web.listen-address="0.0.0.0:{{ prometheus_web_port }}"
          --web.enable-lifecycle
          --storage.tsdb.retention.time=30d

        volumes:
          - "{{ prometheus_config_dir }}:{{ prometheus_config_container_dir }}"
          - prometheus_data:/prometheus

        restart_policy: unless-stopped
        ports:
          - "{{ prometheus_web_port }}:{{ prometheus_web_port }}"
        log_driver: json-file
        log_options:
          max-file: "10"
          max-size: 30m
          mode: non-blocking
          max-buffer-size: 4m
    
    # Grafana
    - name: Create persistent data directory for Grafana
      ansible.builtin.file:
        path: "{{ grafana_data_dir }}"
        state: directory
        mode: "0755"
    
    - name: Ensure the correct permissions for Grafana directories
      ansible.builtin.file:
        path: "{{ grafana_data_dir }}"
        owner: 472  
        group: 472
        mode: "0755"
        state: directory

    - name: Ensure the correct permissions for Grafana config directory
      ansible.builtin.file:
        path: "{{ grafana_config_dir }}"
        owner: 472
        group: 472
        mode: "0755"
        state: directory

    - name: Create a default grafana.ini if missing
      ansible.builtin.copy:
        dest: "{{ grafana_config_dir }}/grafana.ini"
        content: |
          # Basic grafana.ini content
          [paths]
          data = /var/lib/grafana
          logs = /var/log/grafana
        owner: 472
        group: 472
        mode: "0644"
      when: not ansible.builtin.stat(path="{{ grafana_config_dir }}/grafana.ini").stat.exists


    - name: Pull the Grafana Docker image
      community.docker.docker_image:
        name: "{{ grafana_image }}"
        source: pull

    - name: Run Grafana container
      community.docker.docker_container:
        name: "{{ grafana_container_name }}"
        image: "{{ grafana_image }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ grafana_port }}:{{ grafana_port }}"
        volumes:
          - "{{ grafana_data_dir }}:/var/lib/grafana"  
          - "{{ grafana_config_dir }}:/etc/grafana" 
        env:
          GF_SECURITY_ADMIN_USER: "{{ grafana_admin_user }}"
          GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"
          GF_SERVER_HTTP_PORT: "{{ grafana_port }}"
        log_driver: "json-file"
        log_options:
          max-size: "100m"
          max-file: "5"
          mode: "non-blocking"
        privileged: true
